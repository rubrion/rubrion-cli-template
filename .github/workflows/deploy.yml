name: Production Release Pipeline

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Enter version (e.g., 1.2.3). Leave empty for auto patch bump."
        required: false
        default: ""

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: \${{ vars.RUBRION_APP_ID }}
          private-key: \${{ secrets.RUBRION_APP_SECRET }}

      - name: Set Git User Identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Checkout Develop Branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: develop
          token: \${{ steps.app-token.outputs.token }}
      
      - name: Ensure Develop is Up to Date
        run: |
          git fetch origin develop
          git checkout develop
          git pull origin develop
      
      - name: Merge Develop into Main
        run: |
          git checkout main
          git merge --no-ff develop
          git push origin main
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Determine Release Version
        id: version
        run: |
          if [ -n "\${{ github.event.inputs.release_version }}" ]; then
            VERSION=\${{ github.event.inputs.release_version }}
          else
            LAST_TAG=\$(git tag --sort=-v:refname | head -n 1 | sed 's/v//')
            IFS='.' read -r major minor patch <<< "\$LAST_TAG"
            VERSION="\$major.\$minor.\$((patch + 1))"
          fi
          echo "VERSION=\$VERSION" >> \$GITHUB_ENV
          echo "Release version set to \$VERSION"

      - name: Generate Changelog
        run: |
          npx conventional-changelog-cli -p angular -o docs/CHANGELOG.md
          git add docs/CHANGELOG.md
          git commit -m "docs: release v${VERSION} [skip ci]"
          git push origin main

      - name: Create Git Tag
        run: |
          git tag "v\${VERSION}"
          git push origin --tags

      - name: Set Up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      - name: Build Cross-Platform Binaries
        run: |
          go mod tidy
          echo "Building CLI for version \$VERSION"
          mkdir -p dist
      
          GOOS=linux GOARCH=amd64 go build -o dist/mc-rubrion-cli-linux -ldflags="-X 'mc-rubrion-cli/commands.CurrentVersion=\${VERSION}'" main.go || exit 1
          GOOS=windows GOARCH=amd64 go build -o dist/mc-rubrion-cli.exe -ldflags="-X 'mc-rubrion-cli/commands.CurrentVersion=\${VERSION}'" main.go || exit 1
          GOOS=darwin GOARCH=amd64 go build -o dist/mc-rubrion-cli-mac -ldflags="-X 'mc-rubrion-cli/commands.CurrentVersion=\${VERSION}'" main.go || exit 1
      
          echo "Build completed. Contents of dist/:"
          ls -lh dist/

      - name: Create GitHub Release
        run: |
          gh release create "v\${VERSION}" \
            --title "Release v\${VERSION}" \
            --notes-file CHANGELOG.md \
            dist/mc-rubrion-cli-linux dist/mc-rubrion-cli.exe dist/mc-rubrion-cli-mac
        env:
          GH_TOKEN: \${{ secrets.GITHUB_TOKEN }}
